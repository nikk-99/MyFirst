({
    setInItData : function(component, event, helper){
        console.log('accountSplitLst ',component.get('v.accountSplitLst'));
        if(component.get("v.recordId") == undefined){
            var value = helper.getParameterByName(component , event, 'inContextOfRef');
            var context = JSON.parse(window.atob(value));
            component.set("v.recordId",context.attributes.recordId);    
        }
        console.log('rec id new', component.get("v.recordId"));
        var action = component.get("c.getUserList");
        component.set("v.isPercentageFree",false);
        
        action.setCallback(this,function(response){
            var state = response.getState();
            if(state == "SUCCESS"){
                var result = response.getReturnValue();
                component.set("v.UserList",result);
                component.set("v.SelectedUserList",result);
                console.log('user list ',component.get('v.UserList'));
            }
        });
        $A.enqueueAction(action);
        this.AddAccSplit(component, event, helper);
        this.fillActualRegion(component, event, helper);
    },
    AddAccSplit : function(component, event, helper) {
        var openFrom = component.get("v.openFrom");
        if(openFrom != 'update'){
            this.fillAccountSplitList(component, event, helper);
            this.addNewRow(component, event, helper);
        }else{
            this.fillAccountSplitList(component, event, helper);
        }
    },
    addNewRow : function(component, event, helper){
        var accSplit = new Object();
        accSplit.Actual_Region__c = '';
        accSplit.Percentage__c = 0.00;
        accSplit.Sales_Representative__r ='';
        console.log(accSplit);
        var accSplitList = component.get("v.accountSplitLst");
        if(accSplitList.length == 0){
            accSplitList = new Array();
        }
        var percantage = 0;
        console.log(accSplitList);
        for(var i=0;i<accSplitList.length;i++){
            if(accSplitList[i].Percentage__c){
                percantage = parseInt(percantage)+parseInt(accSplitList[i].Percentage__c); 
            }
        }
        console.log( percantage);
        if(percantage >= 100){
            component.find('notifLib').showNotice({
                "variant": "error",
                "header": "Something has gone wrong!",
                "message": "Your account splits are already 100%. Please edit existing account splits"
                
            });
        }else{
            accSplitList.push(accSplit);
            component.set("v.accountSplitLst",accSplitList);
            console.log('AS @@##', component.get("v.accountSplitLst"));
        }
    },
    fillAccountSplitList : function(component, event, helper){
        var action = component.get("c.getAccountList");
        action.setParams({ accId : component.get("v.recordId") });
        action.setCallback(this,function(response){
            var state = response.getState();
            if(state == "SUCCESS"){
                var result = response.getReturnValue();
                console.log('Account List >>',result);
                component.set("v.accountSplitLst",result);
                if(component.get("v.accountSplitLst").length == 0){
                    this.addNewRow(component, event, helper);
                }
            }
        });
        $A.enqueueAction(action);
    },
    fillActualRegion : function(component, event, helper){
        var action = component.get("c.getActualRegion");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                var storeResponse = response.getReturnValue(); 
                component.set("v.actualRegionList",storeResponse);
                console.log(storeResponse);
            }
            
        });
        $A.enqueueAction(action);
    },
    showToast : function(message) {
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            "title": "ERROR!",
            "message": message
        });
        toastEvent.fire();
    },
    saveData : function (component, event, helper){
        var openFrom = component.get("v.openFrom");
        var action = component.get("c.saveAccountSplit");
        var splitList = component.get("v.accountSplitLst");        
        console.log('slpit list json> ' , JSON.stringify(splitList));        
        
        action.setParams({json : JSON.stringify(splitList), accId : component.get("v.recordId")});
        action.setCallback(this, function(response) {
            var state = response.getState();
            console.log('response', state);
            if (state === "SUCCESS") {
                if(openFrom == 'update'){
                    var appEvent = $A.get("e.c:CloseModal");
                    appEvent.setParams({
                        "isClose" :true});
                    appEvent.fire();
                }else{
                    var url = this.getBaseURL(component, event,'')+'lightning/r/Account/'+component.get("v.recordId")+'/view';
                    console.log('url save',url);
                    location.href = url;
                }
            }else if (state === "ERROR") {
                var errors = response.getError();
                console.log(errors);
                console.log('errors.. ' + errors[0].message);
                if (errors) {
                    console.log('errors.. ' + errors[0].message);
                    component.find('notifLib').showNotice({
                        "variant": "error",
                        "header": "Something has gone wrong!",
                        "message": errors[0].message
                        
                    });
                } else {
                    console.log("Unknown error");
                }
            }
        });
        $A.enqueueAction(action);
    },
    getParameterByName: function(component, event, name) {
        name = name.replace(/[\[\]]/g, "\\$&");
        var url = window.location.href;
        var regex = new RegExp("[?&]" + name + "(=1\.([^&#]*)|&|#|$)");
        var results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
    getBaseURL : function(component, event, name){
        var url = location.href;  // entire url including querystring - also: window.location.href;
        var baseURL = url.substring(0, url.indexOf('/', 14));
        
        
        if (baseURL.indexOf('http://localhost') != -1) {
            // Base Url for localhost
            var url = location.href;  // window.location.href;
            var pathname = location.pathname;  // window.location.pathname;
            var index1 = url.indexOf(pathname);
            var index2 = url.indexOf("/", index1 + 1);
            var baseLocalUrl = url.substr(0, index2);
            
            return baseLocalUrl + "/";
        }
        else {
            // Root Url for domain name
            return baseURL + "/";
        }
        
    },
    deleteAccountSplit : function(component, event, helper,accSplitId){
        component.set("v.HideSpinner", true);
        if(accSplitId != undefined){
            var action = component.get("c.deleteAccountSplit");
            action.setParams({accSplitId : accSplitId});
            action.setCallback(this, function(response) {
                var state = response.getState();
                if (state === "SUCCESS") {
                    var storeResponse = response.getReturnValue();
                    console.log(storeResponse);
                    component.set("v.HideSpinner", false);
                }
                
            });
            $A.enqueueAction(action);
        }
    }
})